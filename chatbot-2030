<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JuristeAI 2030 - Assistant Juridique Intelligent</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Space Grotesk', sans-serif;
            background: linear-gradient(135deg, #0a0e27 0%, #1a1f3a 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            position: relative;
            overflow: hidden;
        }
        
        /* Particules animées en arrière-plan */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                radial-gradient(circle at 20% 80%, rgba(0, 255, 236, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 0, 128, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(255, 255, 0, 0.05) 0%, transparent 50%);
            animation: pulse 10s ease-in-out infinite;
            pointer-events: none;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 0.5; }
            50% { opacity: 0.8; }
        }
        
        .chat-container {
            width: 100%;
            max-width: 800px;
            height: 600px;
            background: rgba(20, 25, 46, 0.9);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(0, 255, 236, 0.3);
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 
                0 20px 60px rgba(0, 255, 236, 0.2),
                inset 0 0 100px rgba(0, 255, 236, 0.05);
            position: relative;
            z-index: 10;
        }
        
        .chat-header {
            background: linear-gradient(90deg, rgba(0, 255, 236, 0.1), rgba(255, 0, 128, 0.1));
            padding: 20px 30px;
            border-bottom: 1px solid rgba(0, 255, 236, 0.3);
            position: relative;
        }
        
        .chat-header::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg, transparent, #00ffec, transparent);
            animation: scan 3s linear infinite;
        }
        
        @keyframes scan {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }
        
        .chat-header h2 {
            color: #00ffec;
            font-weight: 700;
            font-size: 24px;
            letter-spacing: 2px;
            text-transform: uppercase;
            text-align: center;
            text-shadow: 0 0 20px rgba(0, 255, 236, 0.5);
        }
        
        .status-indicator {
            text-align: center;
            margin-top: 5px;
            font-size: 12px;
            color: #00ff88;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
        }
        
        .status-dot {
            width: 8px;
            height: 8px;
            background: #00ff88;
            border-radius: 50%;
            box-shadow: 0 0 10px rgba(0, 255, 136, 0.8);
            animation: blink 2s infinite;
        }
        
        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        .chat-messages {
            height: 420px;
            overflow-y: auto;
            padding: 20px;
            background: rgba(10, 14, 39, 0.5);
        }
        
        .chat-messages::-webkit-scrollbar {
            width: 8px;
        }
        
        .chat-messages::-webkit-scrollbar-track {
            background: rgba(0, 255, 236, 0.1);
            border-radius: 4px;
        }
        
        .chat-messages::-webkit-scrollbar-thumb {
            background: rgba(0, 255, 236, 0.5);
            border-radius: 4px;
        }
        
        .message {
            margin-bottom: 20px;
            animation: fadeIn 0.5s ease-out;
        }
        
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .user-message {
            display: flex;
            justify-content: flex-end;
        }
        
        .user-message .message-content {
            background: linear-gradient(135deg, #ff0080, #ff0040);
            color: white;
            padding: 15px 20px;
            border-radius: 20px 20px 5px 20px;
            max-width: 70%;
            box-shadow: 0 5px 20px rgba(255, 0, 128, 0.3);
        }
        
        .bot-message {
            display: flex;
            align-items: flex-start;
            gap: 10px;
        }
        
        .bot-avatar {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #00ffec, #00ccff);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 0 20px rgba(0, 255, 236, 0.5);
        }
        
        .bot-avatar::after {
            content: '⚖';
            font-size: 20px;
        }
        
        .bot-message .message-content {
            background: rgba(0, 255, 236, 0.1);
            border: 1px solid rgba(0, 255, 236, 0.3);
            color: #e0e0e0;
            padding: 15px 20px;
            border-radius: 20px 20px 20px 5px;
            max-width: 70%;
            box-shadow: 0 5px 20px rgba(0, 255, 236, 0.2);
        }
        
        .typing-indicator {
            display: none;
            padding: 20px;
            color: #00ffec;
            font-style: italic;
            position: relative;
        }
        
        .typing-indicator::after {
            content: '...';
            animation: dots 1.5s steps(4, end) infinite;
        }
        
        @keyframes dots {
            0%, 20% { content: ''; }
            40% { content: '.'; }
            60% { content: '..'; }
            80%, 100% { content: '...'; }
        }
        
        .chat-input {
            display: flex;
            padding: 20px;
            gap: 15px;
            background: rgba(20, 25, 46, 0.9);
            border-top: 1px solid rgba(0, 255, 236, 0.3);
        }
        
        #messageInput {
            flex: 1;
            background: rgba(0, 255, 236, 0.1);
            border: 1px solid rgba(0, 255, 236, 0.3);
            color: white;
            padding: 15px 20px;
            border-radius: 25px;
            font-size: 16px;
            font-family: inherit;
            transition: all 0.3s ease;
        }
        
        #messageInput:focus {
            outline: none;
            border-color: #00ffec;
            box-shadow: 0 0 20px rgba(0, 255, 236, 0.4);
        }
        
        #messageInput::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }
        
        #sendButton {
            background: linear-gradient(135deg, #00ffec, #00ccff);
            color: #0a0e27;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            box-shadow: 0 5px 20px rgba(0, 255, 236, 0.4);
        }
        
        #sendButton:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(0, 255, 236, 0.6);
        }
        
        #sendButton:active {
            transform: translateY(0);
        }
        
        #sendButton:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        
        /* Animation de chargement */
        .loading-dots {
            display: inline-flex;
            gap: 4px;
        }
        
        .loading-dot {
            width: 8px;
            height: 8px;
            background: #00ffec;
            border-radius: 50%;
            animation: bounce 1.4s ease-in-out infinite;
        }
        
        .loading-dot:nth-child(1) { animation-delay: -0.32s; }
        .loading-dot:nth-child(2) { animation-delay: -0.16s; }
        
        @keyframes bounce {
            0%, 80%, 100% {
                transform: scale(0.8);
                opacity: 0.5;
            }
            40% {
                transform: scale(1);
                opacity: 1;
            }
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h2>JuristeAI 2030</h2>
            <div class="status-indicator">
                <span class="status-dot"></span>
                <span>Intelligence Juridique Active</span>
            </div>
        </div>
        
        <div class="chat-messages" id="chatMessages">
            <div class="bot-message">
                <div class="bot-avatar"></div>
                <div class="message-content">
                    Bienvenue dans JuristeAI 2030. Je suis votre assistant juridique intelligent de nouvelle génération. Comment puis-je vous accompagner dans vos questions légales aujourd'hui ?
                </div>
            </div>
        </div>
        
        <div class="typing-indicator" id="typingIndicator">
            <div class="loading-dots">
                <span class="loading-dot"></span>
                <span class="loading-dot"></span>
                <span class="loading-dot"></span>
            </div>
            <span style="margin-left: 10px;">Analyse juridique en cours</span>
        </div>
        
        <div class="chat-input">
            <input 
                type="text" 
                id="messageInput" 
                placeholder="Posez votre question juridique..."
                onkeypress="handleKeyPress(event)"
            />
            <button id="sendButton" onclick="sendMessage()">Envoyer</button>
        </div>
    </div>

    <script>
        const webhookUrl = 'https://n8n.srv781279.hstgr.cloud/webhook/37342d5csf-97853-4246-862f-1390f7ebd464/chat';
        
        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }
        
        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            if (!message) return;
            
            // Désactiver l'input pendant l'envoi
            input.disabled = true;
            document.getElementById('sendButton').disabled = true;
            
            // Ajouter le message de l'utilisateur
            addMessage(message, 'user');
            
            // Vider l'input
            input.value = '';
            
            // Afficher l'indicateur de frappe
            document.getElementById('typingIndicator').style.display = 'flex';
            
            try {
                // Envoyer la requête au webhook N8N
                const response = await fetch(webhookUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: message,
                        timestamp: new Date().toISOString()
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Erreur de connexion');
                }
                
                // Debug : afficher la réponse brute
                const responseText = await response.text();
                console.log('Réponse brute du webhook:', responseText);
                
                let data;
                try {
                    data = JSON.parse(responseText);
                } catch (e) {
                    // Si ce n'est pas du JSON, utiliser directement le texte
                    console.log('Réponse non-JSON reçue');
                    addMessage(responseText, 'bot');
                    return;
                }
                
                // Debug : afficher la structure de données
                console.log('Structure de données reçue:', data);
                
                // Essayer différentes structures possibles
                let botResponse;
                
                // Si la réponse est directement une chaîne
                if (typeof data === 'string') {
                    botResponse = data;
                }
                // Si c'est un objet, chercher dans différents champs possibles
                else if (typeof data === 'object') {
                    botResponse = data.message || 
                                 data.response || 
                                 data.text || 
                                 data.output ||
                                 data.answer ||
                                 data.reply ||
                                 data.content ||
                                 data.body ||
                                 JSON.stringify(data); // Afficher l'objet complet si aucun champ connu
                }
                
                addMessage(botResponse, 'bot');
                
            } catch (error) {
                console.error('Erreur:', error);
                addMessage('Erreur système détectée. Veuillez reformuler votre question juridique.', 'bot');
            } finally {
                // Masquer l'indicateur de frappe
                document.getElementById('typingIndicator').style.display = 'none';
                
                // Réactiver l'input
                input.disabled = false;
                document.getElementById('sendButton').disabled = false;
                input.focus();
            }
        }
        
        function addMessage(text, sender) {
            const messagesContainer = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message`;
            
            if (sender === 'bot') {
                messageDiv.innerHTML = `
                    <div class="bot-avatar"></div>
                    <div class="message-content">${text}</div>
                `;
            } else {
                messageDiv.innerHTML = `<div class="message-content">${text}</div>`;
            }
            
            messagesContainer.appendChild(messageDiv);
            
            // Faire défiler vers le bas
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
    </script>
</body>
</html>
